// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/feed.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	reflect "reflect"

	domain "github.com/STUD-IT-team/bmstu-stud-web-backend/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockfeedServiceStorage is a mock of feedServiceStorage interface.
type MockfeedServiceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockfeedServiceStorageMockRecorder
}

// MockfeedServiceStorageMockRecorder is the mock recorder for MockfeedServiceStorage.
type MockfeedServiceStorageMockRecorder struct {
	mock *MockfeedServiceStorage
}

// NewMockfeedServiceStorage creates a new mock instance.
func NewMockfeedServiceStorage(ctrl *gomock.Controller) *MockfeedServiceStorage {
	mock := &MockfeedServiceStorage{ctrl: ctrl}
	mock.recorder = &MockfeedServiceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfeedServiceStorage) EXPECT() *MockfeedServiceStorageMockRecorder {
	return m.recorder
}

// DeleteFeed mocks base method.
func (m *MockfeedServiceStorage) DeleteFeed(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeed indicates an expected call of DeleteFeed.
func (mr *MockfeedServiceStorageMockRecorder) DeleteFeed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeed", reflect.TypeOf((*MockfeedServiceStorage)(nil).DeleteFeed), ctx, id)
}

// GetAllFeed mocks base method.
func (m *MockfeedServiceStorage) GetAllFeed(ctx context.Context) ([]domain.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFeed", ctx)
	ret0, _ := ret[0].([]domain.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFeed indicates an expected call of GetAllFeed.
func (mr *MockfeedServiceStorageMockRecorder) GetAllFeed(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFeed", reflect.TypeOf((*MockfeedServiceStorage)(nil).GetAllFeed), ctx)
}

// GetFeed mocks base method.
func (m *MockfeedServiceStorage) GetFeed(ctx context.Context, id int) (domain.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", ctx, id)
	ret0, _ := ret[0].(domain.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockfeedServiceStorageMockRecorder) GetFeed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockfeedServiceStorage)(nil).GetFeed), ctx, id)
}

// GetFeedByFilterLimitAndOffset mocks base method.
func (m *MockfeedServiceStorage) GetFeedByFilterLimitAndOffset(ctx context.Context, limit, offset int) ([]domain.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedByFilterLimitAndOffset", ctx, limit, offset)
	ret0, _ := ret[0].([]domain.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedByFilterLimitAndOffset indicates an expected call of GetFeedByFilterLimitAndOffset.
func (mr *MockfeedServiceStorageMockRecorder) GetFeedByFilterLimitAndOffset(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedByFilterLimitAndOffset", reflect.TypeOf((*MockfeedServiceStorage)(nil).GetFeedByFilterLimitAndOffset), ctx, limit, offset)
}

// UpdateFeed mocks base method.
func (m *MockfeedServiceStorage) UpdateFeed(ctx context.Context, feed domain.Feed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeed", ctx, feed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeed indicates an expected call of UpdateFeed.
func (mr *MockfeedServiceStorageMockRecorder) UpdateFeed(ctx, feed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeed", reflect.TypeOf((*MockfeedServiceStorage)(nil).UpdateFeed), ctx, feed)
}

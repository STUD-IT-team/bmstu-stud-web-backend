services:
  app:
    container_name: app_container
    build:
      context: ../
      dockerfile: ./cmd/app/Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - app.env
      - minio.env
    depends_on:
      - postgres
      - minio
    networks:
      - postgres
      - minio

  postgres:
    container_name: postgres_container
    hostname: postgres
    image: postgres:14.8-alpine3.18
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"

    env_file:
      - db.env
#    volumes:
#      - ../InitDatabase:/docker-entrypoint-initdb.d
#      - ../SWB_DB-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stud -d stud_web_backend"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - postgres

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:7.2
    env_file:
      - pg-admin.env
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres

  migrator:
    container_name: migrator_container
    depends_on: [postgres]
    env_file:
      - migrator.env
    build:
      context: ../
      dockerfile: ./migrations/Dockerfile
    networks:
      - postgres
  
  minio:
    container_name: minio_container
    hostname: minio
    image: minio/minio:latest
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - minio.env
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - minio
    
  minio-migrate:
    container_name: migrate_minio
    depends_on:
      [minio]
    build:
      context: ../
      dockerfile: ./pkg/minio/Dockerfile
    env_file: 
      - minio.env
    networks:
      - minio

volumes:
  SWB_DB-data:
  pgadmin-data:

networks:
  postgres:
    driver: bridge
  minio:
    driver: bridge